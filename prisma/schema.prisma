datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  bio             String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  username        String?
  twitterUsername String?
  website         String?

  accounts Account[]
  sessions Session[]

  solutions Solution[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Challenge {
  id           String        @id @default(cuid())
  title        String
  description  String
  score        Int
  type         ChallengeType
  requirements String[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  solutions Solution[]
}

model Solution {
  id          String  @id @default(cuid())
  title       String
  description String?
  demoURL     String?
  repoURL     String?

  challenge   Challenge @relation(fields: [challengeId], references: [id])
  challengeId String

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

enum ChallengeType {
  frameworks
  frontend
  fullstack
  responsive
}
